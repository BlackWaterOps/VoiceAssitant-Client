// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Please = (function() {
    function Please(options) {
      this.error = __bind(this.error, this);
      this.log = __bind(this.log, this);
      this.formatDate = __bind(this.formatDate, this);
      this.elapsedTimeHelper = __bind(this.elapsedTimeHelper, this);
      this.getFuzzyTimeValue = __bind(this.getFuzzyTimeValue, this);
      this.parseTimeFuzzyObject = __bind(this.parseTimeFuzzyObject, this);
      this.parseTimeAddObject = __bind(this.parseTimeAddObject, this);
      this.parseTimeObject = __bind(this.parseTimeObject, this);
      this.parseDateAddObject = __bind(this.parseDateAddObject, this);
      this.parseDateWeekdayObject = __bind(this.parseDateWeekdayObject, this);
      this.parseDateObject = __bind(this.parseDateObject, this);
      this.buildDatetime = __bind(this.buildDatetime, this);
      this.replaceDates = __bind(this.replaceDates, this);
      this.replaceLocation = __bind(this.replaceLocation, this);
      this.prependTo = __bind(this.prependTo, this);
      this.clientOperations = __bind(this.clientOperations, this);
      this.toISOString = __bind(this.toISOString, this);
      this.requestHelper = __bind(this.requestHelper, this);
      this.buildDeviceInfo = __bind(this.buildDeviceInfo, this);
      this.nameMap = __bind(this.nameMap, this);
      this.replace = __bind(this.replace, this);
      this.find = __bind(this.find, this);
      this.reduce = __bind(this.reduce, this);
      this.isEqual = __bind(this.isEqual, this);
      this.updatePosition = __bind(this.updatePosition, this);
      this.getLocation = __bind(this.getLocation, this);
      this.show = __bind(this.show, this);
      this.addDebug = __bind(this.addDebug, this);
      this.actorResponseHandler = __bind(this.actorResponseHandler, this);
      this.actor = __bind(this.actor, this);
      this.auditorSuccessHandler = __bind(this.auditorSuccessHandler, this);
      this.auditor = __bind(this.auditor, this);
      this.clearChoiceList = __bind(this.clearChoiceList, this);
      this.handleChoice = __bind(this.handleChoice, this);
      this.choose = __bind(this.choose, this);
      this.disambiguatePassive = __bind(this.disambiguatePassive, this);
      this.disambiguatePersonal = __bind(this.disambiguatePersonal, this);
      this.disambiguateCandidate = __bind(this.disambiguateCandidate, this);
      this.disambiguateActive = __bind(this.disambiguateActive, this);
      this.disambiguateSuccessHandler = __bind(this.disambiguateSuccessHandler, this);
      this.classify = __bind(this.classify, this);
      this.replaceContext = __bind(this.replaceContext, this);
      this.cancel = __bind(this.cancel, this);
      this.clearContext = __bind(this.clearContext, this);
      this.expand = __bind(this.expand, this);
      this.keyup = __bind(this.keyup, this);
      this.ask = __bind(this.ask, this);
      this.registerHandlebarHelpers = __bind(this.registerHandlebarHelpers, this);
      this.registerListeners = __bind(this.registerListeners, this);
      this.init = __bind(this.init, this);
      this.debug = true;
      this.debugData = {};
      this.classifier = 'http://casper-cached.stremor-nli.appspot.com/v1';
      this.disambiguator = 'http://casper-cached.stremor-nli.appspot.com/v1/disambiguate';
      this.personal = 'http://stremor-pud.appspot.com/v1/';
      this.responder = 'http://rez.stremor-apier.appspot.com/v1/';
      this.lat = 33.4930947;
      this.lon = -111.928558;
      this.mainContext = null;
      this.disambigContext = null;
      this.history = [];
      this.pos = this.history.length;
      this.loader = $('.loader');
      this.board = $('.board');
      this.input = $('.main-input');
      this.dateRegex = /\d{4}[-]\d{2}[-]\d{2}/i;
      this.timeRegex = /\d{2}[:]\d{2}[:]\d{2}/i;
      this.counter = 0;
      this.disableSpeech = false;
      this.currentState = {
        status: null,
        origin: null
      };
      this.presets = {
        'after work': '18:00:00',
        'breakfast': '7:30:00',
        'lunch': '12:00:00'
      };
      this.init();
    }

    Please.prototype.init = function() {
      var init;
      this.getLocation();
      this.registerHandlebarHelpers();
      this.registerListeners();
      this.input.focus().on('webkitspeechchange', this.ask).on('keyup', this.keyup);
      $('body').on('click', '.expand', this.expand).on('click', '.choice-item', this.handleChoice);
      $('#cancel').on('click', this.cancel);
      if (this.board.is(':empty')) {
        init = $('.init');
        init.fadeIn('slow');
        return setTimeout((function() {
          return init.fadeOut('slow');
        }), 1000);
      }
    };

    Please.prototype.registerListeners = function() {
      return $(document).on('init', this.classify).on('audit', this.auditor).on('disambiguate', this.disambiguatePassive).on('disambiguate:personal', this.disambiguatePersonal).on('disambiguate:active', this.disambiguateActive).on('disambiguate:candidate', this.disambiguateCandidate).on('restart', this.replaceContext).on('choice', this.choose).on('inprogress', this.show).on('completed', this.actor).on('error', this.show).on('debug', this.addDebug);
    };

    Please.prototype.registerHandlebarHelpers = function() {
      var _this = this;
      Handlebars.registerHelper('elapsedTime', function(dateString) {
        var results;
        results = _this.elapsedTimeHelper(dateString);
        return results.newDate + ' ' + results.newTime;
      });
      Handlebars.registerHelper('flightDates', function(dateString, type, options) {
        var am, date, day, dd, formatted, hh, min, mm, mon, result, time, yy;
        if (dateString == null) {
          return "--";
        }
        formatted = _this.formatDate(dateString);
        am = formatted.am;
        mm = formatted.month;
        dd = formatted.date;
        yy = formatted.year;
        hh = formatted.hours;
        min = formatted.minutes;
        day = formatted.dayOfWeek;
        mon = formatted.monthOfYear;
        time = $('<span/>').addClass('formatted-time').text(hh + ":" + min + " " + am);
        date = $('<span/>').addClass('formatted-date').text(mm + "/" + dd + "/" + yy);
        if (type === 'actual') {
          result = time.get(0).outerHTML;
        } else {
          result = date.get(0).outerHTML + "&nbsp;" + time.get(0).outerHTML;
        }
        return new Handlebars.SafeString(result);
      });
      Handlebars.registerHelper('eventDates', function(dateString) {
        var day, dd, formatted, mm, mon, yy;
        formatted = _this.formatDate(dateString);
        mm = formatted.month;
        dd = formatted.date;
        yy = formatted.year;
        day = formatted.dayOfWeek;
        mon = formatted.monthOfYear;
        return day.substr(0, 3) + ", " + mon.substr(0, 3) + " " + dd + ", " + yy;
      });
      return Handlebars.registerHelper('stockShare', function(direction, price_change, price_change_percent) {
        var change, result;
        change = $('<span/>').text(price_change + " " + price_change_percent + "%");
        if (direction === "up") {
          change.addClass('stock-up');
        }
        if (direction === "down") {
          change.addClass('stock-down');
        }
        result = change.get(0).outerHTML;
        return new Handlebars.SafeString(result);
      });
    };

    Please.prototype.ask = function(input) {
      var doc, template, text;
      if (typeof input === 'string') {
        text = input;
      } else {
        input = $(input);
        text = input.val();
        input.val('');
      }
      template = Handlebars.compile($('#bubblein-template').html());
      this.board.append(template(text)).scrollTop(this.board.find('.bubble:last').offset().top);
      $('.input-form').addClass('cancel');
      doc = $(document);
      if (this.currentState.state === 'inprogress' || (this.currentState.state === 'error' && (this.disambigContext != null))) {
        return doc.trigger({
          type: 'disambiguate:active',
          response: text
        });
      } else if (this.currentState.state === 'choice') {
        return doc.trigger({
          type: 'disambiguate:candidate',
          response: text
        });
      } else {
        return doc.trigger({
          type: 'init',
          response: text
        });
      }
    };

    Please.prototype.keyup = function(e) {
      var target, value;
      value = $(e.target).val();
      target = $(e.target);
      switch (e.which) {
        case 13:
          if (value) {
            this.ask(target);
            this.history.push(value);
            return this.pos = this.history.length;
          }
          break;
        case 38:
          if (this.pos > 0) {
            this.pos -= 1;
          }
          return target.val(this.history[this.pos]);
        case 40:
          if (this.pos < this.history.length) {
            this.pos += 1;
          }
          return target.val(this.history[this.pos]);
      }
    };

    Please.prototype.expand = function(e) {
      e.preventDefault();
      return $(e.target).parent().next().toggle();
    };

    Please.prototype.clearContext = function() {
      this.mainContext = null;
      this.disambigContext = null;
      return this.currentState = {
        state: null,
        origin: null
      };
    };

    Please.prototype.cancel = function(e) {
      this.board.empty();
      this.history = [];
      this.clearContext();
      $('.input-form').removeClass('cancel');
      this.loader.hide();
      this.counter = 0;
      this.input.focus();
      return this.clearChoiceList();
    };

    Please.prototype.store = {
      createCookie: function(k, v, d) {
        var exp, val, _ref;
        exp = new Date();
        exp.setDate(exp.getDate() + d);
        val = escape(v) + ((_ref = exdays === null) != null ? _ref : {
          "": "; expires=" + exp.toUTCString()
        });
        document.cookie = k + "=" + v;
        return true;
      },
      get: function(k) {
        var i, x, y;
        if (window.Modernizr.localstorage) {
          return $.parseJSON(localStorage.getItem(k));
        } else {
          i = 0;
          while (i < c.length) {
            x = c[i].substr(0, c[i].indexOf("="));
            y = c[i].substr(c[i].indexOf("=") + 1);
            x = x.replace(/^\s+|\s+$/g, "");
            if (x === k) {
              return unescape(y);
            }
            c++;
          }
        }
      },
      set: function(k, v) {
        if (window.Modernizr.localstorage) {
          return localStorage.setItem(k, JSON.stringify(v));
        } else {
          return createCookie(k, v, 365);
        }
      },
      remove: function(k) {
        if (window.Modernizr.localstorage) {
          return localStorage.removeItem(k);
        } else {
          return createCookie(k, v, -1);
        }
      },
      clear: function() {
        if (window.Modernizr.localstorage) {
          return localStorage.clear();
        } else {
          return createCookie(k, v, -1);
        }
      }
    };

    Please.prototype.replaceContext = function(e) {
      return $(document).trigger({
        type: 'audit',
        response: e.response.data
      });
    };

    Please.prototype.classify = function(e) {
      var data, query,
        _this = this;
      query = e instanceof $.Event ? e.response : e;
      data = {
        query: query
      };
      return this.requestHelper(this.classifier, "GET", data, function(response) {
        return $(document).trigger($.Event('debug')).trigger({
          type: 'audit',
          response: _this.clientOperations(response, response.payload)
        });
      });
    };

    Please.prototype.disambiguateSuccessHandler = function(response) {
      var context, debuggable, field, type;
      debuggable = ['inprogress', 'error', 'choice'];
      if (debuggable.indexOf(this.currentState.state) !== -1) {
        $(document).trigger($.Event('debug'));
      }
      if (response != null) {
        context = $.extend(true, {}, this.mainContext);
        context = this.clientOperations(context, response);
        field = this.disambigContext.field;
        type = this.disambigContext.type;
        if (field.indexOf('.') !== -1) {
          context = this.replace(context, field, response[type]);
        } else {
          context.payload[field] = response[type];
        }
        return $(document).trigger({
          type: 'audit',
          response: context
        });
      } else {
        return console.log('oops no responder response', results);
      }
    };

    Please.prototype.disambiguateActive = function(e) {
      var postData, text, type;
      type = this.disambigContext.type;
      text = e.response;
      postData = {
        payload: text,
        type: type
      };
      return this.requestHelper(this.disambiguator + '/active', 'POST', postData, this.disambiguateSuccessHandler);
    };

    Please.prototype.disambiguateCandidate = function(e) {
      var list, postData, text, type;
      type = this.disambigContext.type;
      text = e.response;
      list = this.disambigContext.show.simple.list;
      postData = {
        payload: text,
        type: type,
        candidates: list
      };
      return this.requestHelper(this.disambiguator + '/candidate', 'POST', postData, this.disambiguateSuccessHandler);
      /*
      		@requestHelper(@disambiguator + '/candidate', 'POST', postData, (response) =>
      			@disambiguateSuccessHandler(response, field, type)
      		)
      */

    };

    Please.prototype.disambiguatePersonal = function(e) {
      var data, field, postData, text, type;
      data = e.response;
      field = data.field;
      type = data.type;
      text = field.indexOf('.') !== -1 ? this.find(this.mainContext, field) : this.mainContext.payload[field];
      postData = {
        type: type,
        payload: text
      };
      return this.requestHelper(this.personal + 'disambiguate', 'POST', postData, this.disambiguateSuccessHandler);
    };

    Please.prototype.disambiguatePassive = function(e) {
      var data, field, postData, text, type;
      data = e.response;
      field = data.field;
      type = data.type;
      text = field.indexOf('.') !== -1 ? this.find(this.mainContext, field) : this.mainContext.payload[field];
      postData = {
        type: type,
        payload: text
      };
      return this.requestHelper(this.disambiguator + '/passive', 'POST', postData, this.disambiguateSuccessHandler);
    };

    Please.prototype.choose = function(e) {
      var data, item, list, listItem, _i, _len, _ref;
      data = e.response;
      list = $('<ul/>');
      _ref = data.show.simple.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        listItem = $('<li/>').addClass('choice-item').data('choice', item).append($('<a/>').text(item.text));
        list.append(listItem);
      }
      $('.list-slider').html(list);
      $('body').addClass('choice');
      return this.show(e);
    };

    Please.prototype.handleChoice = function(e) {
      var choice, field, template,
        _this = this;
      choice = $(e.currentTarget).data('choice');
      field = this.disambigContext.field;
      template = Handlebars.compile($('#bubblein-template').html());
      this.board.append(template(choice.text)).scrollTop(this.board.find('.bubble:last').offset().top);
      if (field.indexOf('.') !== -1) {
        this.mainContext = this.replace(this.mainContext, field, choice.data);
      } else {
        this.mainContext.payload[field] = choice.data;
      }
      return this.requestHelper(this.responder + 'audit', 'POST', this.mainContext, function(response) {
        $(document).trigger($.Event('debug'));
        return _this.auditorSuccessHandler(response);
      });
    };

    Please.prototype.clearChoiceList = function() {
      return $('body').removeClass('choice').find('list-slider').empty();
    };

    Please.prototype.auditor = function(e) {
      var context, isEqual;
      context = e.response;
      isEqual = this.isEqual(context, this.mainContext);
      if (!isEqual) {
        this.mainContext = context;
        return this.requestHelper(this.responder + 'audit', 'POST', context, this.auditorSuccessHandler);
      } else {
        return console.log('potential request loop detected');
      }
    };

    Please.prototype.auditorSuccessHandler = function(response) {
      var crossCheck, state, tempStates;
      state = response.status.replace(' ', '');
      crossCheck = state.split(':')[0];
      tempStates = ['disambiguate', 'inprogress', 'choice'];
      if (tempStates.indexOf(crossCheck) !== -1) {
        this.disambigContext = response;
      }
      this.currentState = {
        state: state,
        origin: 'auditor'
      };
      return $(document).trigger({
        type: this.currentState.state,
        response: response
      });
    };

    Please.prototype.actor = function(e) {
      var data, endpoint;
      this.disambigContext = {};
      data = e.response;
      if (data.actor === null || data.actor === void 0) {
        return this.show(data);
      } else {
        endpoint = this.responder + 'actors/' + data.actor;
        if (data.actor.indexOf('private') !== -1) {
          data.actor = data.actor.replace('private:', '');
          endpoint = this.personal + 'actors/' + data.actor;
        }
        return this.requestHelper(endpoint, 'POST', this.mainContext, this.actorResponseHandler);
      }
    };

    Please.prototype.actorResponseHandler = function(response) {
      this.clearContext();
      return this.show(response);
    };

    Please.prototype.addDebug = function(e) {
      var results, template;
      if (this.debug === false) {
        return;
      }
      if (this.debugData.request != null) {
        this.debugData.request = JSON.stringify(this.debugData.request, null, 4);
      }
      if (this.debugData.response != null) {
        this.debugData.response = JSON.stringify(this.debugData.response, null, 4);
      }
      results = e.response;
      if (!results) {
        results = {
          debug: this.debugData
        };
      } else {
        results.debug = this.debugData;
      }
      template = Handlebars.compile($('#debug-template').html());
      return this.board.find('.bubble:last').append(template(results));
    };

    Please.prototype.show = function(results) {
      var template, templateBase, templateData, templateName, templateType;
      if (results instanceof $.Event) {
        results = results.response;
      }
      templateData = results.show.simple;
      if (templateData.link != null) {
        templateName = 'link';
      } else if (templateData.image != null) {
        templateName = 'image';
      } else {
        templateName = 'bubbleout';
      }
      template = $('#' + templateName + '-template');
      template = Handlebars.compile(template.html());
      this.board.append(template(templateData)).scrollTop(this.board.find('.bubble:last').offset().top);
      $(document).trigger({
        type: 'debug',
        response: results
      });
      if ((results.show != null) && (results.show.structured != null) && (results.show.structured.template != null)) {
        templateData = results.show.structured.items || results.show.structured.item;
        template = results.show.structured.template.split(':');
        templateBase = template[0];
        templateType = template[1];
        templateName = template[2] != null ? template[2] : templateType;
        template = $('#' + templateType + '-template');
        if (template.length === 0) {
          template = $('#' + templateBase + '-template');
        }
        if (template.length > 0) {
          template = Handlebars.compile(template.html());
          this.board.find('.bubble:last').append(template(templateData)).scrollTop(this.board.find('.bubble:last').offset().top);
        }
      }
      this.loader.hide();
      this.counter = 0;
      if (window !== window.top) {
        return window.top.postMessage({
          action: 'speak',
          speak: results.speak,
          options: {}
        }, '*');
      } else {
        return $(document).trigger({
          type: 'speak',
          response: results.speak
        });
      }
    };

    Please.prototype.getLocation = function() {
      return navigator.geolocation.getCurrentPosition(this.updatePosition);
    };

    Please.prototype.updatePosition = function(position) {
      this.lat = position.coords.latitude;
      return this.lon = position.coords.longitude;
    };

    Please.prototype.isEqual = function(object1, object2) {
      return JSON.stringify(object1) === JSON.stringify(object2);
    };

    Please.prototype.reduce = function(fun, iterable, initial) {
      if (iterable.length > 0) {
        initial = fun(initial, iterable[0]);
        return this.reduce(fun, iterable.slice(1), initial);
      } else {
        return initial;
      }
    };

    Please.prototype.find = function(context, field) {
      var fields,
        _this = this;
      fields = field.split('.');
      if ('function' === typeof Array.prototype.reduce) {
        return fields.reduce(function(prevVal, currVal, index, array) {
          return prevVal[currVal] || null;
        }, context);
      } else {
        return this.reduce(function(obj, key) {
          return obj[key] || null;
        }, fields, context);
      }
    };

    Please.prototype.replace = function(context, field, type) {
      var fields, last, obj;
      fields = field.split('.');
      last = fields.pop();
      field = fields.join('.');
      obj = this.find(context, field);
      obj[last] = type;
      return context;
    };

    Please.prototype.nameMap = function(key) {
      var map;
      map = false;
      if (key.indexOf(this.disambiguator) !== -1) {
        map = "Disambiguator";
      } else if (key.indexOf(this.classifier) !== -1) {
        map = "Casper";
      } else if (key.indexOf(this.responder) !== -1) {
        map = "Rez";
      } else if (key.indexOf(this.personal) !== -1) {
        map = "Pud";
      }
      return map;
    };

    Please.prototype.buildDeviceInfo = function() {
      var clientDate, deviceInfo;
      clientDate = new Date();
      return deviceInfo = {
        "latitude": this.lat,
        "longitude": this.lon,
        "timestamp": clientDate.getTime() / 1000,
        "timeoffset": -clientDate.getTimezoneOffset() / 60
      };
    };

    Please.prototype.requestHelper = function(endpoint, type, data, doneHandler) {
      var endpointName,
        _this = this;
      if (endpoint.indexOf(this.disambiguator) !== -1 && endpoint.indexOf('passive') !== -1) {
        data = $.extend(true, {}, data);
        data.device_info = this.buildDeviceInfo();
      }
      if (this.debug === true) {
        this.debugData = {
          endpoint: endpoint,
          type: type,
          request: data
        };
      }
      endpointName = this.nameMap(endpoint);
      return $.ajax({
        url: endpoint,
        type: type,
        data: type === "POST" ? JSON.stringify(data) : data,
        dataType: "json",
        timeout: 20000,
        beforeSend: function() {
          _this.log(endpointName, ">", data);
          _this.clearChoiceList();
          _this.input.prop('readonly', true);
          return _this.loader.show();
        }
      }).done(function(response, status) {
        _this.log(endpointName, "<", response);
        _this.input.prop('readonly', false);
        if (_this.debug === true) {
          _this.debugData.status = status;
          _this.debugData.response = response;
        }
        if (doneHandler != null) {
          return doneHandler(response);
        }
      }).fail(function(response, status) {
        _this.error(endpointName, "<", (response.responseJSON != null ? response.responseJSON : response));
        _this.input.prop('readonly', false);
        if (_this.debug === true) {
          _this.debugData.status = status;
          _this.debugData.response = response;
        }
        _this.loader.hide();
        return _this.mainContext = null;
      });
    };

    /*
    	operators = 
    		"+": (left, right) -> parseInt(left, 10) + parseInt(right, 10)
    		"-": (left, right) -> parseInt(left, 10) - parseInt(right, 10)
    */


    Please.prototype.toISOString = function(dateObj) {
      var pad;
      pad = function(number) {
        var r;
        r = String(number);
        if (r.length === 1) {
          r = '0' + r;
        }
        return r;
      };
      return dateObj.getFullYear() + '-' + pad(dateObj.getMonth() + 1) + '-' + pad(dateObj.getDate()) + 'T' + pad(dateObj.getHours()) + ':' + pad(dateObj.getMinutes()) + ':' + pad(dateObj.getSeconds());
    };

    Please.prototype.clientOperations = function(context, data) {
      if (data != null) {
        data = this.replaceLocation(data);
        data = this.replaceDates(data);
        if (data.unused_tokens != null) {
          context = this.prependTo(context, data);
        }
      }
      return context;
    };

    Please.prototype.prependTo = function(context, data) {
      var field, payloadField, prepend;
      prepend = data.unused_tokens.join(" ");
      field = data.prepend_to;
      payloadField = context.payload[field];
      payloadField = payloadField == null ? "" : " " + payloadField;
      context.payload[field] = prepend + payloadField;
      return context;
    };

    Please.prototype.replaceLocation = function(payload) {
      if ((payload != null) && (payload.location != null)) {
        switch (payload.location) {
          case '#current_location':
            payload.location = this.buildDeviceInfo();
        }
      }
      return payload;
    };

    Please.prototype.replaceDates = function(payload) {
      var date, datetime, datetimes, includeDate, includeTime, pair, time, _i, _len;
      datetimes = [['date', 'time'], ['start_date', 'start_time'], ['end_date', 'end_time']];
      for (_i = 0, _len = datetimes.length; _i < _len; _i++) {
        pair = datetimes[_i];
        date = pair[0];
        time = pair[1];
        if (Object.prototype.toString.call(time) === "[object Array]") {
          continue;
        }
        if ((payload[date] != null) || (payload[time] != null)) {
          includeDate = true;
          includeTime = true;
          if (payload[date] == null) {
            console.log("dont include " + date);
            includeDate = false;
          }
          if (payload[time] == null) {
            console.log("dont include " + time);
            includeTime = false;
          }
          datetime = this.buildDatetime(payload[date], payload[time]);
          if (includeDate === true) {
            payload[date] = datetime[0];
          }
          if (includeTime === true) {
            payload[time] = datetime[1];
          }
        }
      }
      return payload;
    };

    Please.prototype.buildDatetime = function(dateO, timeO) {
      var baseDate, dString, date, dateSplit, dateType, hasDate, now, ret, tString, time, timeSplit, timeType;
      now = new Date();
      date = null;
      time = null;
      dateType = Object.prototype.toString.call(dateO);
      timeType = Object.prototype.toString.call(timeO);
      if (dateType === "[object String]") {
        if (dateO === "#date_now") {
          date = now;
        } else if (dateRegex.test(dateO)) {
          dateSplit = dateO.split("-");
          date = new Date(dateSplit[0], dateSplit[1], dateSplit[2]);
        }
      } else if (dateType === "[object Object]") {
        date = this.parseDateObject(dateO, now);
      }
      if (timeType === "[object String]") {
        if (timeO === "#time_now") {
          time = now;
        } else if (timeRegex.test(timeO)) {
          timeSplit = timeO.split(":");
          time = new Date(now.getFullYear(), now.getMonth(), now.getDate(), timeSplit[0], timeSplit[1]);
        }
      } else if (timeType === "[object Object]") {
        hasDate = date != null ? true : false;
        baseDate = hasDate ? date : now;
        ret = this.parseTimeObject(timeO, baseDate, now);
        if (ret !== null) {
          time = ret;
          if (hasDate) {
            date = ret;
          }
        }
      }
      dString = null;
      tString = null;
      if (date != null) {
        console.log("date", date);
        date = this.toISOString(date);
        dString = date.split("T")[0];
      }
      if (time != null) {
        console.log("time", time);
        time = this.toISOString(time);
        tString = time.split("T")[1];
      }
      return [dString, tString];
    };

    Please.prototype.parseDateObject = function(dateO, now) {
      if (dateO["#date_weekday"] != null) {
        return this.parseDateWeekdayObject(dateO, now);
      }
      if (dateO["#date_add"] != null) {
        return this.parseDateAddObject(dateO, now);
      }
      return null;
    };

    Please.prototype.parseDateWeekdayObject = function(obj, now) {
      var currentDate, currentDay, dayOfWeek, offset;
      dayOfWeek = obj["#date_weekday"];
      currentDay = now.getDay();
      currentDate = now.getDate();
      if (dayOfWeek !== currentDay) {
        offset = currentDay < dayOfWeek ? dayOfWeek - currentDay : 7 - (currentDay - dayOfWeek);
        now.setDate(currentDate + offset);
      }
      return now;
    };

    Please.prototype.parseDateAddObject = function(obj, now) {
      var base, baseDate, operands;
      operands = obj["#date_add"];
      base = operands[0];
      baseDate = null;
      if (base["#date_weekday"] != null) {
        baseDate = this.parseDateObject(first, now);
      } else if (base === "#date_now") {
        baseDate = now;
      }
      if (baseDate === null) {
        return null;
      }
      baseDate.setDate(baseDate.getDate() + parseInt(operands[1], 10));
      return baseDate;
    };

    Please.prototype.parseTimeObject = function(timeO, baseDate, now) {
      if (timeO["#time_add"] != null) {
        return this.parseTimeAddObject(timeO, baseDate, now);
      }
      if (timeO["#fuzzy_time"] != null) {
        return this.parseTimeFuzzyObject(timeO, baseDate, now);
      }
      return null;
    };

    Please.prototype.parseTimeAddObject = function(obj, baseDate, now) {
      var base, baseDateTime, operands;
      operands = obj["#time_add"];
      base = operands[0];
      baseDateTime = null;
      if (first["#fuzzy_time"] != null) {
        baseDateTime = this.parseTimeObject(first, baseDate, now);
      } else if (first === "#time_now") {
        baseDateTime = now;
      }
      if (baseDateTime === null) {
        return null;
      }
      baseDateTime.setSeconds(baseDateTime.getSeconds() + parseInt(operands[1], 10));
      return baseDateTime;
    };

    Please.prototype.parseTimeFuzzyObject = function(obj, baseDate, now) {
      var datetime, def, defaultSplit, defaultTime, label, time;
      label = obj["label"];
      def = obj["default"];
      defaultSplit = def.split(":");
      defaultTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), defaultSplit[0], defaultSplit[1]);
      time = this.getFuzzyTimeValue(label, now);
      datetime = time === null ? defaultTime : time;
      baseDate.setHours(datetime.getHours());
      baseDate.setMinutes(datetime.getMinutes());
      baseDate.setSeconds(datetime.getSeconds());
      return baseDate;
    };

    Please.prototype.getFuzzyTimeValue = function(label, now) {
      var presetLabel, presetSplit;
      presetLabel = this.presets[label];
      if (presetLabel != null) {
        presetSplit = presetLabel.split(":");
        return new Date(now.getFullYear(), now.getMonth(), now.getDate(), presetSplit[0], presetSplit[1]);
      }
      return null;
    };

    /*
    	buildDatetime: (date, time) =>
    		newDate = null
    
    		newDate = @datetimeHelper(date) if date isnt null and date isnt undefined and @dateRegex.test(date) is false
    
    		newDate = @datetimeHelper(time, newDate) if time isnt null and time isnt undefined and @timeRegex.test(time) is false
    
    		return if not newDate?
    
    		dateString = @toISOString(newDate).split('T')
    		
    		date: dateString[0]
    		time: dateString[1]
    	
    	# #date-add: {[{#weekday:1}, [1, 'day']]}
    	weekdayHelper: (dayOfWeek) =>
    		date = new Date();
    
    		currentDay = date.getDay()
    		currentDate = date.getDate()
    
    		# return date if currentDay is dayOfWeek
    		
    		offset = if currentDay < dayOfWeek then (dayOfWeek - currentDay) else (7 - (currentDay - dayOfWeek))
    		
    		date.setDate(currentDate + offset)
    
    		return date
    
    	fuzzyHelper: (datetime, isDate) =>
    		date = new Date()
    
    		label = null
    		def = null
    
    		for key, val of datetime
    			label = val if key is 'label'
    			def = val if key is 'default'
    
    		presetLabel = @presets[label]
    		preference = if presetLabel? then presetLabel else def
    				
    		if preference is null
    			return
    
    		splitSym = if isDate is true then '-' else ':'
    
    		datetimeArr = preference.trim().split(splitSym)
    
    		if isDate is true
    			date.setFullYear datetimeArr[0]
    			date.setMonth (datetimeArr[1] - 1)
    			date.setDate datetimeArr[2]
    		else
    			date.setHours datetimeArr[0]
    			date.setMinutes datetimeArr[1]
    			date.setSeconds datetimeArr[2]
    
    		return date
    	
    	newDateHelper: (datetime) =>
    		if datetime.indexOf('now') isnt -1
    			newDate = new Date();
    
    		else if @dateRegex.test(datetime) is true
    			split = datetime.split('-')
    			newDate = new Date(split[0], (split[1]-1), split[2])
    
    		else if @timeRegex.test(datetime) is true
    			newDate = new Date();
    			split = datetime.split(':')
    			hours = newDate.getHours()
    			minutes = newDate.getMinutes()
    			seconds = newDate.getSeconds()
    
    			if (hours > split[0]) or (hours is split[0] and minutes > split[1])
    				# move date up one day
    				newDate.setDate(newDate.getDate() + 1);
    
    			newDate.setHours split[0]
    			newDate.setMinutes split[1]
    			newDate.setSeconds split[2]
    
    		#@log 'newDate bottom', newDate
    
    		return if newDate is null or newDate is undefined then new Date() else newDate
    
    
    	# {'#time_add': [{'#time_fuzzy': {'label': 'dinner', 'default': '19:00:00'}}, 3600]}
    	datetimeHelper: (dateOrTime, newDate = null) =>
    		#@log dateOrTime
    
    		dateOrTimeType = Object.prototype.toString.call(dateOrTime)
    
    		switch (dateOrTimeType)
    			when '[object String]'
    				if newDate is null
    					newDate = @newDateHelper dateOrTime
    
    			when '[object Object]'
    				for action, parsable of dateOrTime
    					if action.indexOf('weekday') isnt -1
    						return @weekdayHelper parsable
    					else if action.indexOf('fuzzy') isnt -1
    						isDate = if action.indexOf('date') isnt -1 then true else false 
    						return @fuzzyHelper parsable, isDate
    					else
    						operator = if action.indexOf('add') isnt -1 then '+' else '-'
    
    						parsableType = Object.prototype.toString.call(parsable)
    
    						if parsableType is '[object Array]' # date partials
    							for item in parsable
    								itemType = Object.prototype.toString.call(item);
    
    								if newDate is null 
    									switch itemType
    										when '[object String]' # 'now' or '2013-07-01'
    											newDate = @newDateHelper item
    										when '[object Object]' #weekday, #fuzzy operators
    											for itemKey, itemValue of item
    												if newDate is null
    													if itemKey.indexOf('weekday') isnt -1
    														newDate = @weekdayHelper itemValue
    													else if itemKey.indexOf('fuzzy') isnt -1
    														isDate = if itemKey.indexOf('date') isnt -1 then true else false 
    														newDate = @fuzzyHelper itemValue, isDate
    								
    								else if itemType is '[object Number]' # dates to add to Date object 
    									interval = item
    									
    									if interval is null 
    										return
    
    									if action.indexOf('time') isnt -1
    										curr = newDate.getSeconds()
    										time = operators[operator](curr, interval)
    										newDate.setSeconds(time)
    									else if action.indexOf('date') isnt -1
    										curr = newDate.getDate()
    										date = operators[operator](curr, interval)
    										newDate.setDate(date)
    
    		return newDate
    */


    Please.prototype.elapsedTimeHelper = function(dateString) {
      var dTime, dt, formatted, origPubdate, origPubtime, pTime, pubdate, pubtime, uTime, ut;
      formatted = this.formatDate(dateString);
      pubdate = formatted.month + "/" + formatted.date + "/" + formatted.year;
      pubtime = formatted.hours + ":" + formatted.minutes;
      origPubdate = pubdate;
      origPubtime = pubtime;
      dt = new Date(dateString);
      ut = new Date();
      dTime = dt.getTime();
      uTime = ut.getTime();
      if ((uTime - dTime) < 86400000) {
        pubdate = "";
        pTime = Math.round(((uTime - dTime) / 1000) / 60);
        if (pTime < 60) {
          pubtime = "About " + pTime + " minutes ago";
        } else {
          pTime = Math.round(pTime / 60);
          if (pTime === 1) {
            pubtime = "About " + pTime + " hour ago";
          } else {
            pubtime = "About " + pTime + " hours ago";
          }
        }
      }
      return {
        oldDate: origPubtime,
        oldTime: origPubdate,
        newDate: pubdate,
        newTime: pubtime
      };
    };

    Please.prototype.formatDate = function(dateString) {
      var am, date, day, daysOfTheWeek, dd, dt, hh, min, mm, monthsOfTheYear, yy;
      monthsOfTheYear = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      daysOfTheWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      dt = new Date(dateString.replace(/[TZ]/g, " ").trim());
      mm = dt.getMonth() + 1;
      dd = dt.getDate();
      yy = dt.getFullYear();
      hh = dt.getHours();
      min = dt.getMinutes();
      day = dt.getDay();
      if (mm < 10) {
        mm = "0" + mm;
      }
      if (dd < 10) {
        dd = "0" + dd;
      }
      am = hh > 12 ? "pm" : "am";
      if (hh > 12) {
        hh = hh - 12;
      }
      if (hh < 10) {
        hh = "0" + hh;
      }
      if (min < 10) {
        min = "0" + min;
      }
      return date = {
        year: yy,
        month: mm,
        monthOfYear: monthsOfTheYear[dt.getMonth()],
        date: dd,
        day: day,
        dayOfWeek: daysOfTheWeek[day],
        hours: hh,
        minutes: min,
        am: am
      };
    };

    Please.prototype.log = function() {
      var args, argument, _i, _len;
      args = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        argument = arguments[_i];
        if (typeof argument === 'object') {
          argument = JSON.stringify(argument, null, " ");
        }
        args.push(argument);
      }
      return console.log(args.join(" "));
    };

    Please.prototype.error = function() {
      var args, argument, _i, _len;
      args = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        argument = arguments[_i];
        if (typeof argument === 'object') {
          argument = JSON.stringify(argument, null, " ");
        }
        args.push(argument);
      }
      return console.error(args.join(" "));
    };

    return Please;

  })();

}).call(this);
