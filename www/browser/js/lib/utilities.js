// Generated by CoffeeScript 1.6.3
(function() {
  define(['underscore', 'backbone', 'models/appState'], function(_, Backbone, AppState) {
    var utilities,
      _this = this;
    return utilities = {
      operators: {
        "+": function(left, right) {
          return parseInt(left, 10) + parseInt(right, 10);
        },
        "-": function(left, right) {
          return parseInt(left, 10) - parseInt(right, 10);
        }
      },
      requestHelper: function(endpoint, type, data, successHandler, errorHandler) {
        var clientDate;
        if (AppState.sendDeviceInfo === true) {
          clientDate = new Date();
          data.device_info = {
            lat: AppState.lat,
            lon: AppState.lon,
            timestamp: clientDate.getTime() / 1000,
            timeoffset: -clientDate.getTimezoneOffset() / 60
          };
          AppState.sendDeviceInfo = false;
          if (type === "POST") {
            data = JSON.stringify(data);
          }
          return $.ajax({
            url: endpoint,
            type: type,
            data: data,
            dataType: "json",
            timeout: 10000,
            beforeSend: function() {
              console.log(endpoint, type, data);
              return AppState.set('requestStatus', 'beforeSend');
            }
          }).done(function(response) {
            AppState.set('requestStatus', 'done');
            if (successHandler != null) {
              return successHandler(response);
            }
          }).fail(function(response) {
            AppState.set('requestStatus', 'fail');
            console.log('* POST fail', response, response.getResponseHeader());
            if (errorHandler != null) {
              return errorHandler(response);
            }
          }).always(function(response) {
            return AppState.set('requestStatus', 'complete');
          });
        }
      },
      weekdayHelper: function(dayOfWeek) {
        var currentDate, currentDay, date, offset;
        date = new Date();
        currentDay = date.getDay();
        currentDate = date.getDate();
        if (currentDay === dayOfWeek) {
          return date;
        }
        offset = currentDay < dayOfWeek ? dayOfWeek - currentDay : 7 - (currentDay - dayOfWeek);
        date.setDate(currentDate + offset);
        return date;
      },
      fuzzyHelper: function(datetime, isDate) {
        var date, datetimeArr, def, key, label, preference, presetLabel, splitSym, val;
        date = new Date();
        console.log('handle fuzzy date or time');
        label = null;
        def = null;
        for (key in datetime) {
          val = datetime[key];
          console.log(key, val);
          if (key === 'label') {
            label = val;
          }
          if (key === 'default') {
            def = val;
          }
        }
        presetLabel = _this.presets[label];
        console.log('presetLabel', presetLabel);
        preference = presetLabel != null ? presetLabel : def;
        console.log('use', preference);
        if (preference === null) {
          console.log('useTime error');
          return;
        }
        splitSym = isDate === true ? '-' : ':';
        datetimeArr = preference.trim().split(splitSym);
        if (isDate === true) {
          date.setFullYear(datetimeArr[0]);
          date.setMonth(datetimeArr[1] - 1);
          date.setDate(datetimeArr[2]);
        } else {
          date.setHours(datetimeArr[0]);
          date.setMinutes(datetimeArr[1]);
          date.setSeconds(datetimeArr[2]);
        }
        return date;
      },
      datetimeHelper: function(dateOrTime, newDate) {
        var action, curr, date, interval, isDate, item, itemKey, itemType, itemValue, operator, parsable, parsableType, time, _i, _len;
        if (newDate == null) {
          newDate = null;
        }
        console.log(dateOrTime);
        for (action in dateOrTime) {
          parsable = dateOrTime[action];
          console.log('step 1', action, parsable);
          operator = action.indexOf('add') !== -1 ? '+' : '-';
          parsableType = Object.prototype.toString.call(parsable);
          if (parsableType === '[object Array]') {
            for (_i = 0, _len = parsable.length; _i < _len; _i++) {
              item = parsable[_i];
              itemType = Object.prototype.toString.call(item);
              if (newDate === null) {
                console.log('step 2', 'set datetime');
                switch (itemType) {
                  case 'string':
                    newDate = item === 'now' ? new Date() : new Date(item);
                    break;
                  case '[object Object]':
                    for (itemKey in item) {
                      itemValue = item[itemKey];
                      if (newDate === null) {
                        if (itemKey.indexOf('weekday') !== -1) {
                          newDate = _this.weekdayHelper(itemValue);
                        } else if (itemKey.indexOf('fuzzy') !== -1) {
                          isDate = itemKey.indexOf('date') !== -1 ? true : false;
                          newDate = _this.fuzzyHelper(itemValue, isDate);
                        }
                      }
                    }
                }
              } else if (itemType === '[object Number]') {
                console.log('step 3', 'parse array group');
                interval = item;
                if (interval === null) {
                  console.log('frag error', interval);
                  return;
                }
                if (action.indexOf('time') !== -1) {
                  curr = newDate.getSeconds();
                  time = operators[operator](curr, interval);
                  newDate.setSeconds(time);
                } else if (action.indexOf('date') !== -1) {
                  curr = newDate.getDate();
                  date = operators[operator](curr, interval);
                  newDate.setDate(date);
                }
              }
            }
          }
        }
        return newDate;
      },
      toISOString: function(dateObj) {
        var pad;
        pad = function(number) {
          var r;
          r = String(number);
          if (r.length === 1) {
            r = '0' + r;
          }
          return r;
        };
        return dateObj.getFullYear() + '-' + pad(dateObj.getMonth() + 1) + '-' + pad(dateObj.getDate()) + 'T' + pad(dateObj.getHours()) + ':' + pad(dateObj.getMinutes()) + ':' + pad(dateObj.getSeconds());
      },
      buildDatetime: function(date, time) {
        var dateObj, dateString;
        dateObj = null;
        console.log('start date parsing');
        if (date !== null) {
          dateObj = datetimeHelper(date);
        }
        console.log('start time parsing');
        if (time !== null) {
          dateObj = datetimeHelper(time, dateObj);
        }
        dateString = toISOString(dateObj).split('T');
        return {
          date: dateString[0],
          time: dateString[1]
        };
      }
    };
  });

}).call(this);
