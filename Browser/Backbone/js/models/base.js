// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'models/appState', 'util'], function(_, Backbone, AppState, Util) {
    var ModelBase, _ref;
    return ModelBase = (function(_super) {
      __extends(ModelBase, _super);

      function ModelBase() {
        this.sync = __bind(this.sync, this);
        this.post = __bind(this.post, this);
        this.setDebugData = __bind(this.setDebugData, this);
        _ref = ModelBase.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ModelBase.prototype.debug = AppState.get('debug');

      ModelBase.prototype.setDebugData = function(data) {
        var debugData;
        if (this.debug === true) {
          debugData = AppState.get('debugData');
          _.extend(debugData, data);
          return AppState.set('debugData', debugData);
        }
      };

      ModelBase.prototype.post = function(attributes, options) {
        if (options == null) {
          options = {};
        }
        options.contentType = 'application/x-www-form-urlencoded';
        options.type = 'POST';
        return Backbone.Model.prototype.save.call(this, attributes, options);
      };

      ModelBase.prototype.sync = function(method, model, options) {
        var original, request,
          _this = this;
        original = Backbone.sync.previous || Backbone.sync;
        this.setDebugData({
          request: model.attributes,
          endpoint: model.url
        });
        request = original.call(Backbone, method, model, options);
        request.done(function(response, textStatus, jqXHR) {
          Util.log('done', response);
          _this.setDebugData({
            response: response,
            status: textStatus
          });
          return _this.trigger('done', model, response, options);
        }).fail(function(jqXHR, textStatus, errorThrown) {
          Util.log('fail', textStatus);
          return _this.setDebugData({
            response: errorThrown,
            status: textStatus
          });
        });
        return request;
      };

      return ModelBase;

    })(Backbone.Model);
  });

}).call(this);
