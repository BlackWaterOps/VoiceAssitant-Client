// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'models/base', 'models/appState'], function(_, Backbone, ModelBase, AppState) {
    var responder, _ref;
    return responder = (function(_super) {
      __extends(responder, _super);

      function responder() {
        this.url = __bind(this.url, this);
        _ref = responder.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      responder.prototype.defaults = {
        model: '',
        action: '',
        payload: {}
      };

      responder.prototype.urlRoot = 'http://rez.stremor-apier.appspot.com/v1/';

      responder.prototype.urlAction = null;

      responder.prototype.url = function(action) {
        if (this.urlAction != null) {
          return this.urlRoot + this.urlAction;
        } else {
          return this.urlRoot;
        }
      };

      responder.prototype.initialize = function(attributes, options) {
        console.log('responder init', attributes, options);
        if ((options != null) && (options.action != null)) {
          switch (options.action) {
            case 'audit':
              return this.urlAction = options.action;
            case 'actor':
              return this.urlAction = options.action + '/' + attributes.actor;
          }
        }
      };

      responder.prototype.parse = function(response, options) {
        AppState.set('responderContext', response);
        return response;
      };

      return responder;

    })(ModelBase);
  });

}).call(this);
