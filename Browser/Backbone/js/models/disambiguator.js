// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'util', 'models/appState'], function(_, Backbone, Util, AppState) {
    var disambiguator, _ref;
    return disambiguator = (function(_super) {
      __extends(disambiguator, _super);

      function disambiguator() {
        _ref = disambiguator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      disambiguator.prototype.defaults = {
        text: '',
        types: [],
        context: null
      };

      disambiguator.prototype.urlRoot = 'http://casper-cached.stremor-x.appspot.com/disambiguate';

      disambiguator.prototype.initialize = function(attrs, options) {};

      /*
      		save: (attrs, options) ->
      			if AppState.inProgress is true
      				field = AppState.responderContext.field
      				type = AppState.responderContext.type
      				text = payload
      				data = 
      					text: text
      					types: [type]
      				console.log 'disambiguate user response', data
      			else
      				console.log 'disambiguate rez response'
      
      				field = payload.field
      				# TODO: handle multi types
      				type = payload.type
      				text = AppState.mainContext.payload[field]
      				data = 
      					text: text
      					types: [type]
      
      			Backbone.Models.prototype.save.call this, options
      */


      disambiguator.prototype.post = function(attrs, options) {};

      disambiguator.prototype.parse = function(response, options) {
        var datetime;
        if ((response != null) && ((response.date != null) || (response.time != null))) {
          datetime = Util.buildDatetime(response.date, response.time);
          response[type] = datetime[type];
          return console.log('disambiguate parse', results);
        }
      };

      return disambiguator;

    })(Backbone.Model);
  });

}).call(this);
